## Specific Goals:
## Practice using subqueries
## Practice using CASE statements and conditional logic
## Practice constructing longer queries in a step-wise fashion to address multiple computations or pieces of logic
## Practice translating real analysis questions into SQL queries
## Gain experience with how to handle “messy data” in SQL queries and analyses
## Gain an appreciation for how long it can take to design queries that address important analysis questions 

## Encouragement from mentor:
## Upon finishing the course you feel confident that you know how to work through any query you need to write in the future. 

## Warning: Teradata doesn't permit to use IF statement


## Exercise 1
## How many distinct dates are there in the saledate column of the transaction table for each month/year combination in the database? 

SELECT EXTRACT(YEAR from saledate) as year_num, EXTRACT(MONTH from saledate) as month_num, 
COUNT(DISTINCT saledate) 
FROM trnsact
GROUP BY year_num, month_num
ORDER BY year_num ASC, month_num ASC;
# There are some missing dates due to Thanksgiving (11.25), Christmas (12.25), etc

## Exercise 2 
## Use a CASE statement within an aggregate function to determine 
## which sku had the greatest total sales during the combined summer months of June, July, and August. 

SELECT sku, SUM(amt)
FROM trnsact
WHERE stype='P'
AND saledate = CASE WHEN
EXTRACT(MONTH from saledate)=6 
OR EXTRACT(MONTH from saledate)=7
OR EXTRACT(MONTH from saledate)=8
THEN saledate
END 
GROUP BY sku
ORDER BY SUM(amt) DESC;
# 4108011 1646017.38

## Exercise 3
## How many distinct dates are there in the saledate column of the transaction table for each month/year/store combination in the database? 
## Sort your results by the number of days per combination in ascending order. 

SELECT store, 
EXTRACT(MONTH from saledate) as month_num,
EXTRACT(YEAR from saledate) as year_num,
COUNT(DISTINCT saledate)
FROM trnsact
GROUP BY store, month_num, year_num, saledate
ORDER BY store ASC, year_num ASC, month_num ASC, saledate ASC, COUNT(saledate);

## Exercise 4
## What is the average daily revenue for each store/month/year combination in the database? 
## Calculate this by dividing the total revenue for a group by the number of sales days available in the transaction table for that group.

SELECT store, 
EXTRACT(MONTH from saledate) as month_num,
EXTRACT(YEAR from saledate) as year_num,
COUNT(DISTINCT saledate),
SUM(amt)/COUNT(DISTINCT saledate)
FROM trnsact
WHERE stype='P'
GROUP BY store, month_num, year_num
ORDER BY store ASC, year_num ASC, month_num ASC, COUNT(DISTINCT saledate);

##  removes all the data from August, 2005

SELECT store, 
EXTRACT(MONTH from saledate) as month_num,
EXTRACT(YEAR from saledate) as year_num,
COUNT(DISTINCT saledate),
SUM(amt)/COUNT(DISTINCT saledate)
FROM trnsact
WHERE stype='P' 
AND saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27')
GROUP BY store, month_num, year_num
ORDER BY store ASC, year_num ASC, month_num ASC, COUNT(DISTINCT saledate);

## removes saledate that are less than 20 days 
## (a) using Having statement

SELECT store, 
EXTRACT(MONTH from saledate) as month_num,
EXTRACT(YEAR from saledate) as year_num,
COUNT(DISTINCT saledate),
SUM(amt)/COUNT(DISTINCT saledate)
FROM trnsact
WHERE stype='P' 
AND saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27')
GROUP BY store, month_num, year_num
HAVING COUNT(DISTINCT saledate) > 20
ORDER BY store ASC, year_num ASC, month_num ASC;

## (b) using subquery

SELECT store, month_num, year_num, dis_saledate, AvgRevenue
FROM (SELECT store, 
      EXTRACT(MONTH from saledate) as month_num,
      EXTRACT(YEAR from saledate) as year_num,
      COUNT(DISTINCT saledate) as dis_saledate,
      SUM(amt)/COUNT(DISTINCT saledate) as AvgRevenue
      FROM trnsact
      WHERE stype='P' 
      AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
      GROUP BY store, month_num, year_num
      HAVING COUNT(DISTINCT saledate) > 20) as subquery
ORDER BY store ASC, year_num ASC, month_num ASC;

## avg daily revenue after concatenation

SELECT store, month_year_num, dis_saledate, AvgRevenue
FROM (SELECT store, 
      EXTRACT(MONTH from saledate) || EXTRACT(YEAR from saledate) as month_year_num,
      COUNT(DISTINCT saledate) as dis_saledate,
      SUM(amt)/COUNT(DISTINCT saledate) as AvgRevenue
      FROM trnsact
      WHERE stype='P' 
      AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
      GROUP BY store, month_year_num
      HAVING COUNT(DISTINCT saledate) > 20) as subquery
ORDER BY dis_saledate ASC;

## How do the population statistics of the geographical location surrounding a store relate to sales performance?
## Exercise 5
## What is the average daily revenue brought in by Dillard’s stores in areas of high, medium, or low levels of high school education?







