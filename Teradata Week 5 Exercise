## Specific Goals:
## Practice using subqueries
## Practice using CASE statements and conditional logic
## Practice constructing longer queries in a step-wise fashion to address multiple computations or pieces of logic
## Practice translating real analysis questions into SQL queries
## Gain experience with how to handle “messy data” in SQL queries and analyses
## Gain an appreciation for how long it can take to design queries that address important analysis questions 

## Encouragement from mentor:
## Upon finishing the course you feel confident that you know how to work through any query you need to write in the future. 

## Warning: Teradata doesn't permit to use IF statement


## Exercise 1
## How many distinct dates are there in the saledate column of the transaction table for each month/year combination in the database? 

SELECT EXTRACT(YEAR from saledate) as year_num, EXTRACT(MONTH from saledate) as month_num, 
COUNT(DISTINCT saledate) 
FROM trnsact
GROUP BY year_num, month_num
ORDER BY year_num ASC, month_num ASC;
# There are some missing dates due to Thanksgiving (11.25), Christmas (12.25), etc

## Exercise 2 
## Use a CASE statement within an aggregate function to determine 
## which sku had the greatest total sales during the combined summer months of June, July, and August. 

SELECT sku, SUM(amt)
FROM trnsact
WHERE stype='P'
AND saledate = CASE WHEN
EXTRACT(MONTH from saledate)=6 
OR EXTRACT(MONTH from saledate)=7
OR EXTRACT(MONTH from saledate)=8
THEN saledate
END 
GROUP BY sku
ORDER BY SUM(amt) DESC;
# 4108011 1646017.38

## Exercise 3
## How many distinct dates are there in the saledate column of the transaction table for each month/year/store combination in the database? 
## Sort your results by the number of days per combination in ascending order. 

SELECT store, 
EXTRACT(MONTH from saledate) as month_num,
EXTRACT(YEAR from saledate) as year_num,
COUNT(DISTINCT saledate)
FROM trnsact
GROUP BY store, month_num, year_num, saledate
ORDER BY store ASC, year_num ASC, month_num ASC, saledate ASC, COUNT(saledate);

## Exercise 4
## What is the average daily revenue for each store/month/year combination in the database? 
## Calculate this by dividing the total revenue for a group by the number of sales days available in the transaction table for that group.

SELECT store, 
EXTRACT(MONTH from saledate) as month_num,
EXTRACT(YEAR from saledate) as year_num,
COUNT(DISTINCT saledate),
SUM(amt)/COUNT(DISTINCT saledate)
FROM trnsact
WHERE stype='P'
GROUP BY store, month_num, year_num
ORDER BY store ASC, year_num ASC, month_num ASC, COUNT(DISTINCT saledate);

##  removes all the data from August, 2005

SELECT store, 
EXTRACT(MONTH from saledate) as month_num,
EXTRACT(YEAR from saledate) as year_num,
COUNT(DISTINCT saledate),
SUM(amt)/COUNT(DISTINCT saledate)
FROM trnsact
WHERE stype='P' 
AND saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27')
GROUP BY store, month_num, year_num
ORDER BY store ASC, year_num ASC, month_num ASC, COUNT(DISTINCT saledate);

## removes saledate that are less than 20 days 
## (a) using Having statement

SELECT store, 
EXTRACT(MONTH from saledate) as month_num,
EXTRACT(YEAR from saledate) as year_num,
COUNT(DISTINCT saledate),
SUM(amt)/COUNT(DISTINCT saledate)
FROM trnsact
WHERE stype='P' 
AND saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27')
GROUP BY store, month_num, year_num
HAVING COUNT(DISTINCT saledate) > 20
ORDER BY store ASC, year_num ASC, month_num ASC;

## (b) using subquery

SELECT store, month_num, year_num, dis_saledate, AvgRevenue
FROM (SELECT store, 
      EXTRACT(MONTH from saledate) as month_num,
      EXTRACT(YEAR from saledate) as year_num,
      COUNT(DISTINCT saledate) as dis_saledate,
      SUM(amt)/COUNT(DISTINCT saledate) as AvgRevenue
      FROM trnsact
      WHERE stype='P' 
      AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
      GROUP BY store, month_num, year_num
      HAVING COUNT(DISTINCT saledate) > 20) as subquery
ORDER BY store ASC, year_num ASC, month_num ASC;

## avg daily revenue after concatenation

SELECT store, month_year_num, dis_saledate, AvgRevenue
FROM (SELECT store, 
      EXTRACT(MONTH from saledate) || EXTRACT(YEAR from saledate) as month_year_num,
      COUNT(DISTINCT saledate) as dis_saledate,
      SUM(amt)/COUNT(DISTINCT saledate) as AvgRevenue
      FROM trnsact
      WHERE stype='P' 
      AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
      GROUP BY store, month_year_num
      HAVING COUNT(DISTINCT saledate) > 20) as subquery
ORDER BY dis_saledate ASC;

## How do the population statistics of the geographical location surrounding a store relate to sales performance?
## Exercise 5
## What is the average daily revenue brought in by Dillard’s stores in areas of high, medium, or low levels of high school education?

(a) preferable way 
SELECT CASE 
WHEN store_msa.msa_high>=50 AND store_msa.msa_high<=60 THEN 'low'
WHEN store_msa.msa_high>=60.1 AND store_msa.msa_high <=70 THEN 'medium'
WHEN store_msa.msa_high>70 THEN 'high'
END AS rate,
SUM(trnsact.amt)/SUM(trnsact.saledate) as AvgRevenue
FROM (SELECT store, SUM(amt) as amt, COUNT(DISTINCT saledate) as saledate
      FROM trnsact 
      WHERE stype='P' 
      AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
      GROUP BY store
      HAVING COUNT(DISTINCT saledate)>20) as trnsact 
JOIN store_msa
ON trnsact.store=store_msa.store
GROUP BY rate;

(b)
SELECT CASE 
WHEN subquery.msa_high>=50 AND subquery.msa_high<=60 THEN 'low'
WHEN subquery.msa_high>=60.1 AND subquery.msa_high <=70 THEN 'medium'
WHEN subquery.msa_high>70 THEN 'high'
END AS rate,
SUM(subquery.amt)/SUM(subquery.saledate) as AvgRevenue
FROM (SELECT s.store, s.msa_high, SUM(t.amt) as amt, COUNT(DISTINCT t.saledate) as saledate
      FROM trnsact t JOIN store_msa s
      ON t.store=s.store
      WHERE t.stype='P' 
      AND (t.saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
      GROUP BY s.store, s.msa_high
      HAVING COUNT(DISTINCT t.saledate)>20) as subquery
GROUP BY rate;

## Exercise 6
## Compare the average daily revenues of the stores with the highest median msa_income and the lowest median msa_income. 
## In what city and state were these stores, and which store had a higher average daily revenue?

SELECT store_msa.store, store_msa.city, store_msa.state, SUM(trnsact.amt)/SUM(saledate) as AvgRevenue,
MEDIAN(store_msa.msa_income) as median_income
FROM (SELECT store, SUM(amt) as amt, COUNT(DISTINCT saledate) as saledate
      FROM trnsact
      WHERE stype='P' 
      AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
      GROUP BY store
      HAVING COUNT(DISTINCT saledate) > 20) as trnsact
JOIN store_msa
ON trnsact.store=store_msa.store
GROUP BY store_msa.store, store_msa.city, store_msa.state
ORDER BY median_income DESC, store_msa.city ASC;
# 390 2SPANISH FORT AL 17884.08 56099
# 2707 MCALLEN TX 56601.99 16022

## Exercise 7
## What is the brand of the sku with the greatest standard deviation in sprice?
## Only examine skus that have been part of over 100 transactions. 

SELECT t.sku, s.brand, STDDEV_SAMP(t.sprice)
FROM trnsact t JOIN skuinfo s
ON t.sku=s.sku
GROUP BY t.sku, s.brand
HAVING COUNT(t.saledate)>100
ORDER BY STDDEV_SAMP(t.sprice) DESC;
# 3733090 CABERNET 178.6

## Exercise 8
## Examine all the transactions for the sku with the greatest standard deviation in sprice, 
## but only consider skus that are part of more than 100 transactions.

## Exercise 9: What was the average daily revenue Dillard’s brought in during each month of the year?

SELECT  EXTRACT(MONTH from saledate) || EXTRACT(YEAR from saledate) as month_year_num,
SUM(amt)/COUNT(DISTINCT saledate) as AVG_DAILY_REVENUE
FROM trnsact
WHERE stype='P' 
AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
GROUP BY month_year_num
HAVING COUNT(DISTINCT saledate) > 20
ORDER BY AVG_DAILY_REVENUE DESC;
# 12 2004 11333356.01
# 2  2005 7363752.69
# 7  2005 7271088.69

## Exercise 10
## Which department, in which city and state of what store, 
## had the greatest % increase in average daily sales revenue from November to December?

SELECT revenue.state, revenue.city, revenue.store, d.deptdesc, revenue.RevNov/revenue.DayNov as dailynov,
revenue.RevDec/revenue.DayDec as dailydec, ((dailydec-dailynov)/dailynov) as growth
FROM(SELECT  s.state, s.city, t.sku, s.store, 
SUM(CASE WHEN EXTRACT(MONTH from t.saledate)=11 THEN amt END) as RevNov,
SUM(CASE WHEN EXTRACT(MONTH from t.saledate)=12 THEN amt END) as RevDec,
COUNT(DISTINCT CASE WHEN EXTRACT(MONTH from t.saledate)=11 THEN t.saledate END) as DayNov,
COUNT(DISTINCT CASE WHEN EXTRACT (MONTH from t.saledate)=12 THEN t.saledate END) as DayDec, 
RevNov/DayNov as avgnov, 
RevDec/DayDec as avgdec
FROM trnsact t JOIN strinfo s
ON t.store=s.store
WHERE t.stype='P'
GROUP BY s.state, s.city, t.sku, s.store
HAVING DayNov > 20 AND DayDec > 20) as revenue
JOIN skuinfo s
ON revenue.sku=s.sku
JOIN deptinfo d
ON s.dept=d.dept
GROUP BY revenue.state, revenue.city, revenue.store, d.deptdesc, dailynov, dailydec
ORDER BY growth DESC;
# NC CHARLOTTE 5004 CLINIQUE 35.00(Nov) 150.74(Dec) 3.31(%)

## Exercise 11
## What is the city and state of the store that had the greatest decrease in average daily revenue from August to September?

SELECT revenue.state, revenue.city, revenue.store, d.deptdesc, revenue.Revaug/revenue.Dayaug as dailyaug,
revenue.Revsep/revenue.Daysep as dailysep, (dailysep-dailyaug) as growth
FROM(SELECT  s.state, s.city, t.sku, s.store, 
SUM(CASE WHEN EXTRACT(MONTH from t.saledate)=8 THEN amt END) as Revaug,
SUM(CASE WHEN EXTRACT(MONTH from t.saledate)=9 THEN amt END) as Revsep,
COUNT(DISTINCT CASE WHEN EXTRACT(MONTH from t.saledate)=8 THEN t.saledate END) as Dayaug,
COUNT(DISTINCT CASE WHEN EXTRACT (MONTH from t.saledate)=9 THEN t.saledate END) as Daysep, 
Revaug/Dayaug as avgaug, 
Revsep/Daysep as avgsep
FROM trnsact t JOIN strinfo s
ON t.store=s.store
WHERE t.stype='P' 
AND (t.saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
GROUP BY s.state, s.city, t.sku, s.store
HAVING Dayaug > 20 AND Daysep > 20) as revenue
JOIN skuinfo s
ON revenue.sku=s.sku
JOIN deptinfo d
ON s.dept=d.dept
GROUP BY revenue.state, revenue.city, revenue.store, d.deptdesc, dailyaug, dailysep
ORDER BY growth DESC;
# KY LOUISVILLE 9103 CLINIQUE 472.82(Aug) 49.88(Sep) -422.94

## Exercise 12
## Determine the month of maximum total revenue for each store. 
## Count the number of stores whose month of maximum total revenue was in each of the twelve months. 
## Then determine the month of maximum average daily revenue. 
## Count the number of stores whose month of maximum average daily revenue was in each of the twelve months. 
## How do they compare?

SELECT  
COUNT(CASE WHEN rev.m=1 THEN rev.m END),
COUNT(CASE WHEN rev.m=2 THEN rev.m END),
COUNT(CASE WHEN rev.m=3 THEN rev.m END),
COUNT(CASE WHEN rev.m=4 THEN rev.m END),
COUNT(CASE WHEN rev.m=5 THEN rev.m END),
COUNT(CASE WHEN rev.m=6 THEN rev.m END),
COUNT(CASE WHEN rev.m=7 THEN rev.m END),
COUNT(CASE WHEN rev.m=8 THEN rev.m END),
COUNT(CASE WHEN rev.m=9 THEN rev.m END),
COUNT(CASE WHEN rev.m=10 THEN rev.m END),
COUNT(CASE WHEN rev.m=11 THEN rev.m END),
COUNT(CASE WHEN rev.m=12 THEN rev.m END) as num_month
FROM(SELECT store, EXTRACT(MONTH from saledate) as m, SUM(amt) as revenue, RANK()OVER(PARTITION BY store ORDER BY revenue DESC) as ranking
     FROM trnsact
     WHERE stype='P' 
     AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
     GROUP BY store, m
     HAVING COUNT(DISTINCT saledate) > 20
     QUALIFY ranking <= 1) as rev;
# March  3
# July  3
# September  1
# December  321

SELECT  
COUNT(CASE WHEN rev.m=1 THEN rev.m END) as jan,
COUNT(CASE WHEN rev.m=2 THEN rev.m END) as feb,
COUNT(CASE WHEN rev.m=3 THEN rev.m END) as mar,
COUNT(CASE WHEN rev.m=4 THEN rev.m END) as apr,
COUNT(CASE WHEN rev.m=5 THEN rev.m END) as may,
COUNT(CASE WHEN rev.m=6 THEN rev.m END) as jun,
COUNT(CASE WHEN rev.m=7 THEN rev.m END) as jul,
COUNT(CASE WHEN rev.m=8 THEN rev.m END) as aug,
COUNT(CASE WHEN rev.m=9 THEN rev.m END) as sep,
COUNT(CASE WHEN rev.m=10 THEN rev.m END) as oct,
COUNT(CASE WHEN rev.m=11 THEN rev.m END) as nov,
COUNT(CASE WHEN rev.m=12 THEN rev.m END) 
FROM (SELECT store, EXTRACT(MONTH from saledate) as m, SUM(amt)/COUNT(DISTINCT saledate) as avgdaily_rev , RANK()OVER(PARTITION BY store ORDER BY avgdaily_rev DESC) as ranking
     FROM trnsact
     WHERE stype='P' 
     AND (saledate NOT BETWEEN DATE '2005-08-01' AND LAST_DAY(DATE '2005-08-27'))
     GROUP BY store, m
     HAVING COUNT(DISTINCT saledate) > 20
     QUALIFY ranking <= 1) as rev;
# February  2
# March 4
# May  1
# July  3
# September  1
# December 317
